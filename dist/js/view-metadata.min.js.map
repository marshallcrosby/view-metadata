{"version":3,"sources":["view-metadata.js"],"names":["createEntryElement","attrName","attr","parent","cloneThisNode","entry","cloneNode","innerHTML","toString","appendChild","Element","prototype","setAttributes","attrs","key","this","setAttribute","metaElements","document","head","querySelectorAll","textStyle","createElement","textStyleString","textContent","modalEl","classList","add","id","aria-labelledby","aria-modal","role","tabindex","modalDialog","metadataContentHtmlString","body","forEach","item","metaEntry","metaEntryTitle","getAttributeNames","reduce","acc","name","[object Object]","getAttribute","entryHtml","charset","property","content","httpEquiv","itemprop","viewmetaEntryElement","viewMetaModalBody","querySelector","metaEntryCode","innerText","outerHTML","viewMetadataControls","modalHide","documentElement","remove","focusedElementBeforeModal","focus","addEventListener","activeElement","event","keyCode","shiftKey","firstTabStop","preventDefault","lastTabStop","focusableElements","Array","slice","call","length","modalShow","contains","modalContent","isClickInside","target","code","click"],"mappings":"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","sourcesContent":["/*!\n    * View metadata v1.0.0\n    * Easy to implement tool that displays a pages metadata.\n    *\n    * Copyright 2021-2022 Marshall Crosby\n    * https://marshallcrosby.com\n*/\n\n\n(function() {\n    'use strict';\n\n    // Set multiple attributes on an element\n    Element.prototype.setAttributes = function (attrs) {\n        for(let key in attrs) {\n            this.setAttribute(key, attrs[key]);\n        }\n    };\n\n    // Parse meta entry data into html element\n    function createEntryElement(attrName, attr, parent, cloneThisNode) {\n        if (attr) {\n            const entry = cloneThisNode.cloneNode(true);\n            entry.innerHTML = /* html */`\n                <span class=\"view-metadata-entry__attr-name\">${attrName}:</span>\n                <span class=\"view-metadata-entry__attr-value\">${attr.toString()}</span>\n            `;\n            parent.appendChild(entry);\n        }\n    }\n\n    const metaElements = document.head.querySelectorAll('meta');\n    \n    if (metaElements) {\n\n        //\n        // Create style tag to dump styles into for the metadata modal\n        //\n        \n        const textStyle = document.createElement('style');\n        textStyle.setAttribute('id', 'viewMetaDataStyle');\n\n        // Import compressed styles as a string\n        const textStyleString = `//=inject view-metadata.css`;\n\n        // Apply in page styles to style tag\n        textStyle.textContent = textStyleString;\n\n        // Add in page styles to head\n        document.head.appendChild(textStyle);\n\n\n\n        //\n        // Setup modal markup\n        //\n\n        const modalEl = document.createElement('div');\n        modalEl.classList.add('view-metadata');\n        \n        modalEl.setAttributes({\n            'id': 'viewMetadataModal',\n            'aria-labelledby': 'viewMetadataModalTitle',\n            'aria-modal': 'true',\n            'role': 'dialog',\n            'tabindex': '-1',\n        });\n\n        // Create modal dialog div\n        const modalDialog = document.createElement('div');\n\n        // Insert modal dialog element into outer modal element\n        modalDialog.classList.add('view-metadata__dialog');\n        modalEl.appendChild(modalDialog);\n\n        const metadataContentHtmlString = `//=inject _view-metadata-markup.html`;\n\n        // Add the rest of the html string into modal dialog\n        modalDialog.innerHTML = metadataContentHtmlString;\n        document.body.appendChild(modalEl);\n\n        metaElements.forEach((item) => {\n    \n            // Entries element\n            const metaEntry = document.createElement('div');\n            metaEntry.classList.add('view-metadata-entry');\n            document.body.appendChild(metaEntry);\n    \n            // Entry title\n            const metaEntryTitle = document.createElement('span');\n            metaEntryTitle.classList.add('view-metadata-entry__tag');\n            metaEntryTitle.innerHTML = '&#60;meta&#62;';\n            metaEntry.appendChild(metaEntryTitle);\n    \n            // Create object from node attibute names and values\n            const attrs = item.getAttributeNames().reduce((acc, name) => {\n                return {...acc, [name]: item.getAttribute(name)};\n            },{});\n    \n            // Entry element\n            const entryHtml = document.createElement('div');\n            entryHtml.classList.add('view-metadata-entry__item');\n    \n    \n            /* -----------------------------------------------\n            Apply attibute(s) name and value if defined\n            ----------------------------------------------- */\n    \n            // Charset\n            createEntryElement('charset', attrs.charset, metaEntry, entryHtml);\n    \n            // Name\n            createEntryElement('name', attrs.name, metaEntry, entryHtml);\n    \n            // Property\n            createEntryElement('property', attrs.property, metaEntry, entryHtml);\n    \n            // Content\n            createEntryElement('content', attrs.content, metaEntry, entryHtml);\n    \n            // Http-equiv\n            createEntryElement('http-equiv', attrs.httpEquiv, metaEntry, entryHtml);\n    \n            // Itemprop\n            createEntryElement('itemprop', attrs.itemprop, metaEntry, entryHtml);\n        });\n    \n        const viewmetaEntryElement = document.querySelectorAll('.view-metadata-entry');\n        const viewMetaModalBody = document.querySelector('.view-metadata__body');\n    \n        viewmetaEntryElement.forEach((item) => {\n            viewMetaModalBody.querySelector('.view-metadata__breakdown-view-section').appendChild(item);\n        });\n    \n    \n        // Code view\n        metaElements.forEach((item) => {\n            const metaEntryCode = document.createElement('div');\n            metaEntryCode.classList.add('view-metadata-entry');\n            metaEntryCode.classList.add('view-metadata-entry--code');\n            metaEntryCode.innerText = item.outerHTML.toString();\n            viewMetaModalBody.querySelector('.view-metadata__code-view-section').appendChild(metaEntryCode);\n        });\n\n        const viewMetadataControls = document.querySelector('.view-metadata-overlay-controls');\n        document.body.appendChild(viewMetadataControls);\n\n        const modalShowBtn = viewMetadataControls.querySelector('.view-metadata-modal-btn');\n        modalShowBtn.addEventListener('click', () => {\n            modalShow();\n        });\n\n        // Hide modal\n        function modalHide() {\n            document.documentElement.classList.remove('js-view-metadata-modal-showing');\n            focusedElementBeforeModal.focus();\n        }\n        \n        const modalCloseBtn = document.querySelector('.view-metadata__close-btn');\n        modalCloseBtn.addEventListener('click', () => {\n            modalHide();\n        });\n\n        // Hide modal with esc key\n        modalEl.addEventListener('keydown', function (event) {\n            if (event.key === 'Escape' && document.documentElement.classList.contains('js-view-metadata-modal-showing')) {\n                modalHide();\n            }\n        });\n\n        // Hide modal by clicking outside of it\n        const modalContent = document.querySelectorAll('.view-metadata__content');\n        modalEl.addEventListener('mousedown', function (event) {\n            let isClickInside = false;\n            \n            modalContent.forEach((item) => {\n                if (item.contains(event.target)) {\n                    isClickInside = true;\n                }\n            });\n            \n            if (!isClickInside && document.documentElement.classList.contains('js-view-metadata-modal-showing')) {\n                modalHide();\n            }\n        });\n\n\n\n        // Show modal\n        let focusedElementBeforeModal;\n        function modalShow() {\n            document.documentElement.classList.add('js-view-metadata-modal-showing');\n            \n            // Save current focus\n            focusedElementBeforeModal = document.activeElement;\n\n            // Listen for and trap the keyboard\n            modalEl.addEventListener('keydown', trapTabKey);\n            \n            // Find all focusable children\n            let focusableElementsString =`\n                a[href],\n                area[href],\n                input,\n                select:not([disabled]),\n                textarea:not([tabindex=\"-1\"]),\n                button:not([disabled]),\n                iframe,\n                object,\n                embed,\n                [tabindex=\"0\"],\n                [contenteditable],\n                [role=\"button\"]\n            `;\n                \n            let focusableElements = modalEl.querySelectorAll(focusableElementsString);\n            \n            // Convert NodeList to Array\n            focusableElements = Array.prototype.slice.call(focusableElements);\n\n            const firstTabStop = focusableElements[0];\n            const lastTabStop = focusableElements[focusableElements.length - 1];\n            \n            // Set initial focus on the modal\n            modalEl.focus();\n            \n            function trapTabKey(event) {\n                \n                // Check for TAB key press\n                if (event.keyCode === 9) {\n\n                    // SHIFT + TAB\n                    if (event.shiftKey) {\n                        if (document.activeElement === firstTabStop) {\n                            event.preventDefault();\n                            lastTabStop.focus();\n                        }\n\n                    // TAB\n                    } else {\n                        if (document.activeElement === lastTabStop) {\n                            event.preventDefault();\n                            firstTabStop.focus();\n                        }\n                    }\n                }\n            }\n        }\n\n\n        //\n        // Make div(s) with role=button act like an actual button for a11y reasons\n        //\n        \n        document.querySelectorAll('.view-metadata__close-btn, .view-metadata-modal-btn').forEach((item) => {\n            item.addEventListener('keydown', function (event) {\n                if (event.key === 'Enter' || event.code === 'Space') {\n                    event.preventDefault();\n                    this.click();\n                }\n            });\n        });\n    }\n})();\n\n\n\n"]}