{"version":3,"sources":["view-metadata.js"],"names":["createBreakdownEntry","attrName","attr","parent","cloneThisNode","entry","cloneNode","innerHTML","toString","appendChild","closest","setAttribute","Element","prototype","setAttributes","attrs","key","this","scriptLinkage","document","querySelector","param","btnX","btnY","btnZ","urlParam","URLSearchParams","getAttribute","split","get","metaElements","head","querySelectorAll","textStyle","createElement","textStyleString","textContent","modalEl","classList","add","id","aria-labelledby","aria-modal","role","tabindex","modalDialog","metadataContentHtmlString","body","forEach","item","metaEntry","metaEntryTitle","getAttributeNames","reduce","acc","name","[object Object]","entryHtml","charset","property","content","httpEquiv","itemprop","viewMetaEntryElement","viewMetaModalBody","viewMetaMetaSection","length","removeAttribute","openGraphSectionEl","openGraphEntriesEl","ogEntry","remove","wrapper","docFrag","createDocumentFragment","firstChild","child","removeChild","parentNode","replaceChild","unwrap","requiredEntryEl","missingEntry","missingList","schemaJson","schemaSectionEl","jsonString","trim","validJson","substring","indexOf","lastIndexOf","schemaOut","objectToList","obj","output","Object","keys","JSON","parse","schemaListEl","metaEntryCode","innerText","outerHTML","viewMetadataControls","modalShowBtn","modalHide","documentElement","focusedElementBeforeModal","focus","style","right","left","top","zIndex","addEventListener","activeElement","event","keyCode","shiftKey","firstTabStop","preventDefault","lastTabStop","focusableElements","Array","slice","call","modalShow","contains","modalContent","isClickInside","target","code","click"],"mappings":"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","sourcesContent":["/*!\n    * View metadata v1.2.4\n    * Easy to implement tool that displays a pages metadata.\n    *\n    * Copyright 2021-2022 Blend Interactive\n    * https://blendinteractive.com\n*/\n\n(function () {\n    'use strict';\n\n\n    /* -----------------------------------------------\n        Functions and methods\n    ----------------------------------------------- */\n\n    // Set multiple attributes on an element\n    Element.prototype.setAttributes = function (attrs) {\n        for (let key in attrs) {\n            this.setAttribute(key, attrs[key]);\n        }\n    };\n\n    // Parse meta entry data into html element\n    function createBreakdownEntry(attrName, attr, parent, cloneThisNode) {\n        if (attr) {\n            const entry = cloneThisNode.cloneNode(true);\n\n            entry.innerHTML = /* html */`\n                <div class=\"view-metadata-entry__attr-name\">${attrName}</div>\n                <div class=\"view-metadata-entry__attr-value\">${attr.toString()}</div>\n            `;\n            parent.appendChild(entry);\n\n            // Add special attribute for property metatags\n            if (attrName === 'property') {\n                entry\n                    .closest('.view-metadata-entry')\n                    .setAttribute('data-view-md-item-property', attr.toString());\n            }\n        }\n    }\n\n    // Unwrap function\n    function unwrap(wrapper) {\n        const docFrag = document.createDocumentFragment();\n\n        while (wrapper.firstChild) {\n            const child = wrapper.removeChild(wrapper.firstChild);\n            docFrag.appendChild(child);\n        }\n\n        wrapper.parentNode.replaceChild(docFrag, wrapper);\n    }\n\n\n    /* -----------------------------------------------\n        Params\n    ----------------------------------------------- */\n\n    var scriptLinkage = document.querySelector('script[src*=view-metadata]');\n    let param = {\n        btnX: null,\n        btnY: null,\n        btnZ: null\n    };\n\n    if (scriptLinkage) {\n        const urlParam = new URLSearchParams(scriptLinkage.getAttribute('src').split('?')[1]);\n        param.btnX = urlParam.get('btn-x');\n        param.btnY = urlParam.get('btn-y');\n        param.btnZ = urlParam.get('btn-z');\n    }\n\n    const metaElements = document.head.querySelectorAll('meta');\n\n    if (metaElements) {\n\n        /* -----------------------------------------------\n            Styling\n        ----------------------------------------------- */\n\n        const textStyle = document.createElement('style');\n        textStyle.setAttribute('id', 'viewMetaDataStyle');\n\n        // Import compressed styles as a string\n        const textStyleString = `//=inject view-metadata.css`;\n\n        // Apply in page styles to style tag\n        textStyle.textContent = textStyleString;\n\n        // Add in page styles to head\n        document.head.appendChild(textStyle);\n\n\n        /* -----------------------------------------------\n            Setup modal\n        ----------------------------------------------- */\n\n        const modalEl = document.createElement('div');\n        modalEl.classList.add('view-metadata');\n\n        modalEl.setAttributes({\n            'id': 'viewMetadataModal',\n            'aria-labelledby': 'viewMetadataModalTitle',\n            'aria-modal': 'true',\n            'role': 'dialog',\n            'tabindex': '-1',\n        });\n\n        // Create modal dialog div\n        const modalDialog = document.createElement('div');\n\n        // Insert modal dialog element into outer modal element\n        modalDialog.classList.add('view-metadata__dialog');\n        modalEl.appendChild(modalDialog);\n\n        const metadataContentHtmlString = `//=inject _view-metadata-markup.html`;\n\n        // Add the rest of the html string into modal dialog\n        modalDialog.innerHTML = metadataContentHtmlString;\n        document.body.appendChild(modalEl);\n\n        metaElements.forEach((item) => {\n\n            // Entries element\n            const metaEntry = document.createElement('div');\n            metaEntry.classList.add('view-metadata-entry');\n            document.body.appendChild(metaEntry);\n\n            // Entry title\n            const metaEntryTitle = document.createElement('span');\n            metaEntryTitle.classList.add('view-metadata-entry__tag');\n            metaEntryTitle.innerHTML = '&#60;meta&#62;';\n            metaEntry.appendChild(metaEntryTitle);\n\n            // Create object from node attibute names and values\n            const attrs = item.getAttributeNames().reduce((acc, name) => {\n                return {...acc, [name]: item.getAttribute(name)};\n            },{});\n\n            // Entry element\n            const entryHtml = document.createElement('div');\n            entryHtml.classList.add('view-metadata-entry__item');\n\n\n            /* -----------------------------------------------\n                Apply attribute(s) name and value if defined\n            ----------------------------------------------- */\n\n            // Charset\n            createBreakdownEntry('charset', attrs.charset, metaEntry, entryHtml);\n\n            // Name\n            createBreakdownEntry('name', attrs.name, metaEntry, entryHtml);\n\n            // Property\n            createBreakdownEntry('property', attrs.property, metaEntry, entryHtml);\n\n            // Content\n            createBreakdownEntry('content', attrs.content, metaEntry, entryHtml);\n\n            // Http-equiv\n            createBreakdownEntry('http-equiv', attrs.httpEquiv, metaEntry, entryHtml);\n\n            // Itemprop\n            createBreakdownEntry('itemprop', attrs.itemprop, metaEntry, entryHtml);\n        });\n\n        const viewMetaEntryElement = document.querySelectorAll('.view-metadata-entry');\n        const viewMetaModalBody = document.querySelector('.view-metadata__body');\n        const viewMetaMetaSection = viewMetaModalBody.querySelector('.view-metadata__breakdown-view-section');\n\n        if (viewMetaEntryElement.length) {\n            viewMetaMetaSection.removeAttribute('hidden');\n        }\n\n        viewMetaEntryElement.forEach((item) => {\n            viewMetaMetaSection.appendChild(item);\n        });\n\n\n        /* -----------------------------------------------\n            Render entries in the open graph section\n        ----------------------------------------------- */\n\n        const openGraphSectionEl = viewMetaModalBody.querySelector('.view-metadata__open-graph-section');\n        const openGraphEntriesEl = viewMetaModalBody.querySelectorAll('.view-metadata-entry[data-view-md-item-property*=\"og:\"]');\n\n        if (openGraphEntriesEl.length) {\n            openGraphSectionEl.removeAttribute('hidden');\n\n            openGraphEntriesEl.forEach((item) => {\n                const ogEntry = item.cloneNode(true);\n                ogEntry.querySelectorAll('.view-metadata-entry__attr-name, .view-metadata-entry__tag').forEach(item => item.remove());\n                ogEntry.querySelectorAll('.view-metadata-entry__item').forEach(item => unwrap(item));\n\n                openGraphSectionEl.appendChild(ogEntry);\n            });\n\n            // Add class to required properties\n            const openGraphRequiredArr = [\n                'og:title',\n                'og:type',\n                'og:image',\n                'og:url'\n            ];\n\n            openGraphRequiredArr.forEach((item) => {\n                const requiredEntryEl = openGraphSectionEl.querySelector(`[data-view-md-item-property=\"${item}\"]`);\n\n                if (requiredEntryEl) {\n                    requiredEntryEl\n                        .classList\n                        .add('view-metadata-entry--required');\n                } else {\n                    const missingEntry = document.createElement('strong');\n                    const missingList = openGraphSectionEl.querySelector('.view-metadata__missing');\n                    \n                    missingEntry.innerHTML = `<span style=\"color: red;\">${item}</span>`;\n                    missingList.removeAttribute('hidden');\n                    missingList.appendChild(missingEntry);\n                }\n            });\n\n            // Sort required entries to top of list\n            const notRequiredOpenGraphEl = openGraphSectionEl.querySelectorAll('.view-metadata-entry:not(.view-metadata-entry--required)');\n            notRequiredOpenGraphEl.forEach(item => openGraphSectionEl.appendChild(item));\n        }\n\n\n        /* -----------------------------------------------\n            Render schema section\n        ----------------------------------------------- */\n\n        // Parse json to html ul\n        // Special thanks to John Pavek https://github.com/nhawdge\n        function objectToList(obj) {\n            var output = '';\n\n            for (let key of Object.keys(obj)) {\n                output += `\n                    <li class=\"view-metadata-schema-list__item\">\n                        <span class=\"view-metadata-entry__attr-name\">${key}:</span>\n                    `;\n                if (obj[key] instanceof Object) {\n                    output += `<ul class=\"view-metadata-schema-list\"> ${objectToList(obj[key])}</ul>`;\n                } else {\n                    output += `<span class=\"view-metadata-entry__attr-value\">${obj[key]}</span>`;\n                }\n            }\n\n            output += '</li>';\n            return output;\n        }\n\n        const schemaJson = document.querySelectorAll('[type=\"application/ld+json\"]');\n\n        if (schemaJson.length) {\n            const schemaSectionEl = viewMetaModalBody.querySelector('.view-metadata__schema-section');\n            schemaSectionEl.removeAttribute('hidden');\n\n            schemaJson.forEach((item) => {\n\n                // Clean up json data because for some reason it's invalid\n                const jsonString = item.innerHTML.toString().trim();\n                const validJson = '{' + jsonString.substring(\n                    jsonString.indexOf('{') + 1, \n                    jsonString.lastIndexOf('}')\n                ) + '}';\n\n                const data = JSON.parse(validJson);\n\n                const schemaOut = objectToList(data);\n                const schemaListEl = document.createElement('ul');\n\n                schemaListEl.classList.add('view-metadata-schema-list'); \n                schemaListEl.innerHTML = schemaOut;\n                schemaSectionEl.appendChild(schemaListEl);\n            });\n        }\n\n\n        /* -----------------------------------------------\n            Render code view\n        ----------------------------------------------- */\n\n        metaElements.forEach((item) => {\n            const metaEntryCode = document.createElement('div');\n            metaEntryCode.classList.add('view-metadata-entry');\n            metaEntryCode.classList.add('view-metadata-entry--code');\n            metaEntryCode.innerText = item.outerHTML.toString();\n            viewMetaModalBody.querySelector('.view-metadata__code-view-section').appendChild(metaEntryCode);\n        });\n\n\n        /* -----------------------------------------------\n            Modal button\n        ----------------------------------------------- */\n\n        const viewMetadataControls = document.querySelector('.view-metadata-overlay-controls');\n        document.body.appendChild(viewMetadataControls);\n\n        const modalShowBtn = viewMetadataControls.querySelector('.view-metadata-modal-btn');\n\n        if (param.btnX !== null) {\n            modalShowBtn.style.right = 'auto';\n            modalShowBtn.style.left = param.btnX;\n        }\n\n        if (param.btnY !== null) {\n            modalShowBtn.style.top = param.btnY;\n        }\n\n        if (param.btnZ !== null) {\n            modalShowBtn.style.zIndex = param.btnZ;\n        }\n\n        modalShowBtn.addEventListener('click', () => {\n            modalShow();\n        });\n\n        // Hide modal\n        function modalHide() {\n            document.documentElement.classList.remove('js-view-metadata-modal-showing');\n            focusedElementBeforeModal.focus();\n        }\n\n        const modalCloseBtn = document.querySelector('.view-metadata__close-btn');\n        modalCloseBtn.addEventListener('click', () => {\n            modalHide();\n        });\n\n        // Hide modal with esc key\n        modalEl.addEventListener('keydown', function (event) {\n            if (event.key === 'Escape' && document.documentElement.classList.contains('js-view-metadata-modal-showing')) {\n                modalHide();\n            }\n        });\n\n        // Hide modal by clicking outside of it\n        const modalContent = document.querySelectorAll('.view-metadata__content');\n        modalEl.addEventListener('mousedown', function (event) {\n            let isClickInside = false;\n\n            modalContent.forEach((item) => {\n                if (item.contains(event.target)) {\n                    isClickInside = true;\n                }\n            });\n\n            if (!isClickInside && document.documentElement.classList.contains('js-view-metadata-modal-showing')) {\n                modalHide();\n            }\n        });\n\n        // Show modal\n        let focusedElementBeforeModal;\n        function modalShow() {\n            document.documentElement.classList.add('js-view-metadata-modal-showing');\n\n            // Save current focus\n            focusedElementBeforeModal = document.activeElement;\n\n            // Listen for and trap the keyboard\n            modalEl.addEventListener('keydown', trapTabKey);\n\n            // Find all focusable children\n            let focusableElementsString =`\n                a[href],\n                area[href],\n                input,\n                select:not([disabled]),\n                textarea:not([tabindex=\"-1\"]),\n                button:not([disabled]),\n                iframe,\n                object,\n                embed,\n                [tabindex=\"0\"],\n                [contenteditable],\n                [role=\"button\"]\n            `;\n\n            let focusableElements = modalEl.querySelectorAll(focusableElementsString);\n\n            // Convert NodeList to Array\n            focusableElements = Array.prototype.slice.call(focusableElements);\n\n            const firstTabStop = focusableElements[0];\n            const lastTabStop = focusableElements[focusableElements.length - 1];\n\n            // Set initial focus on the modal\n            modalEl.focus();\n\n            function trapTabKey(event) {\n\n                // Check for TAB key press\n                if (event.keyCode === 9) {\n\n                    // SHIFT + TAB\n                    if (event.shiftKey) {\n                        if (document.activeElement === firstTabStop) {\n                            event.preventDefault();\n                            lastTabStop.focus();\n                        }\n\n                    // TAB\n                    } else {\n                        if (document.activeElement === lastTabStop) {\n                            event.preventDefault();\n                            firstTabStop.focus();\n                        }\n                    }\n                }\n            }\n        }\n\n\n        /* -----------------------------------------------\n            Make div(s) with role=button act like an\n            actual button for a11y reasons\n        ----------------------------------------------- */\n\n        document.querySelectorAll('.view-metadata__close-btn, .view-metadata-modal-btn').forEach((item) => {\n            item.addEventListener('keydown', function (event) {\n                if (event.key === 'Enter' || event.code === 'Space') {\n                    event.preventDefault();\n                    this.click();\n                }\n            });\n        });\n    }\n\n    // javascript:var v = '1.2.3'; var s = document.createElement('script');s.type='text/javascript';document.body.appendChild(s);s.src=`https://cdn.jsdelivr.net/gh/marshallcrosby/view-metadata@${v}/dist/js/view-metadata.min.js`;void(0);s.addEventListener('load',function(){document.querySelector('.view-metadata-modal-btn').click()});\n})();\n\n\n\n\n"]}