{"version":3,"sources":["view-metadata.js"],"names":["createBreakdownEntry","attrName","attr","parent","cloneThisNode","entry","cloneNode","innerHTML","toString","appendChild","closest","setAttribute","Element","prototype","setAttributes","attrs","key","this","scriptLinkage","document","getElementById","querySelector","param","btnX","btnY","btnZ","urlParam","URLSearchParams","getAttribute","split","get","metaElements","head","querySelectorAll","textStyle","createElement","textStyleString","textContent","modalEl","classList","add","id","aria-labelledby","aria-modal","role","tabindex","modalDialog","metadataContentHtmlString","body","forEach","item","metaEntry","metaEntryTitle","getAttributeNames","reduce","acc","name","[object Object]","entryHtml","charset","property","content","httpEquiv","itemprop","viewMetaEntryElement","viewMetaModalBody","viewMetaMetaSection","length","removeAttribute","openGraphSectionEl","openGraphEntriesEl","ogEntry","remove","wrapper","docFrag","createDocumentFragment","firstChild","child","removeChild","parentNode","replaceChild","unwrap","requiredEntryEl","missingEntry","missingList","schemaJson","schemaSectionEl","jsonString","trim","validJson","substring","indexOf","lastIndexOf","data","JSON","parse","Object","keys","dataValue","levelOneEntry","nestedData","stringify","levelTwoEntry","nestedDataData","levelThreeEntry","metaEntryCode","innerText","outerHTML","viewMetadataControls","modalShowBtn","modalHide","documentElement","focusedElementBeforeModal","focus","style","right","left","top","zIndex","addEventListener","activeElement","event","keyCode","shiftKey","firstTabStop","preventDefault","lastTabStop","focusableElements","Array","slice","call","modalShow","contains","modalContent","isClickInside","target","code","click"],"mappings":"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","sourcesContent":["/*!\n    * View metadata v1.2.0\n    * Easy to implement tool that displays a pages metadata.\n    *\n    * Copyright 2021-2022 Marshall Crosby\n    * https://marshallcrosby.com\n*/\n\n/*\n    TODO:\n        Add open graph checking\n            Basic (required):\n                • og:title\n                • og:type\n                • og:image\n                • og:url\n            Optional:\n                • og:audio\n                • og:description\n                • og:determiner\n                • og:locale\n                • og:locale:alternate\n                • og:site_name\n                • og:video\n*/\n\n\n(function() {\n    'use strict';\n\n    // Set multiple attributes on an element\n    Element.prototype.setAttributes = function (attrs) {\n        for(let key in attrs) {\n            this.setAttribute(key, attrs[key]);\n        }\n    };\n\n    // Parse meta entry data into html element\n    function createBreakdownEntry(attrName, attr, parent, cloneThisNode) {\n        if (attr) {\n            const entry = cloneThisNode.cloneNode(true);\n            \n            entry.innerHTML = /* html */`\n                <div class=\"view-metadata-entry__attr-name\">${attrName}</div>\n                <div class=\"view-metadata-entry__attr-value\">${attr.toString()}</div>\n            `;\n            parent.appendChild(entry);\n\n            // Add special attribute for property metatags\n            if (attrName === 'property') {\n                entry\n                    .closest('.view-metadata-entry')\n                    .setAttribute('data-view-md-item-property', attr.toString());\n            }\n        }\n    }\n\n    // Unwrap function\n    function unwrap(wrapper) {\n        const docFrag = document.createDocumentFragment();\n        \n        while (wrapper.firstChild) {\n            const child = wrapper.removeChild(wrapper.firstChild);\n            docFrag.appendChild(child);\n        }\n\n        wrapper.parentNode.replaceChild(docFrag, wrapper);\n    }\n\n    // Params\n    const scriptLinkage = document.getElementById('view-metadata-js') || document.querySelector('script[src*=view-metadata]');\n    const param = {\n        btnX: null,\n        btnY: null,\n        btnZ: null\n    }\n\n    if (scriptLinkage) {\n        const urlParam = new URLSearchParams(scriptLinkage.getAttribute('src').split('?')[1]);\n        param.btnX = urlParam.get('btn-x');\n        param.btnY = urlParam.get('btn-y');\n        param.btnZ = urlParam.get('btn-z');\n    }\n\n    const metaElements = document.head.querySelectorAll('meta');\n    \n    if (metaElements) {\n\n        //\n        // Create style tag to dump styles into for the metadata modal\n        //\n        \n        const textStyle = document.createElement('style');\n        textStyle.setAttribute('id', 'viewMetaDataStyle');\n\n        // Import compressed styles as a string\n        const textStyleString = `//=inject view-metadata.css`;\n\n        // Apply in page styles to style tag\n        textStyle.textContent = textStyleString;\n\n        // Add in page styles to head\n        document.head.appendChild(textStyle);\n\n\n\n        //\n        // Setup modal markup\n        //\n\n        const modalEl = document.createElement('div');\n        modalEl.classList.add('view-metadata');\n        \n        modalEl.setAttributes({\n            'id': 'viewMetadataModal',\n            'aria-labelledby': 'viewMetadataModalTitle',\n            'aria-modal': 'true',\n            'role': 'dialog',\n            'tabindex': '-1',\n        });\n\n        // Create modal dialog div\n        const modalDialog = document.createElement('div');\n\n        // Insert modal dialog element into outer modal element\n        modalDialog.classList.add('view-metadata__dialog');\n        modalEl.appendChild(modalDialog);\n\n        const metadataContentHtmlString = `//=inject _view-metadata-markup.html`;\n\n        // Add the rest of the html string into modal dialog\n        modalDialog.innerHTML = metadataContentHtmlString;\n        document.body.appendChild(modalEl);\n\n        metaElements.forEach((item) => {\n    \n            // Entries element\n            const metaEntry = document.createElement('div');\n            metaEntry.classList.add('view-metadata-entry');\n            document.body.appendChild(metaEntry);\n    \n            // Entry title\n            const metaEntryTitle = document.createElement('span');\n            metaEntryTitle.classList.add('view-metadata-entry__tag');\n            metaEntryTitle.innerHTML = '&#60;meta&#62;';\n            metaEntry.appendChild(metaEntryTitle);\n    \n            // Create object from node attibute names and values\n            const attrs = item.getAttributeNames().reduce((acc, name) => {\n                return {...acc, [name]: item.getAttribute(name)};\n            },{});\n    \n            // Entry element\n            const entryHtml = document.createElement('div');\n            entryHtml.classList.add('view-metadata-entry__item');\n    \n    \n            /* -----------------------------------------------\n            Apply attibute(s) name and value if defined\n            ----------------------------------------------- */\n    \n            // Charset\n            createBreakdownEntry('charset', attrs.charset, metaEntry, entryHtml);\n    \n            // Name\n            createBreakdownEntry('name', attrs.name, metaEntry, entryHtml);\n    \n            // Property\n            createBreakdownEntry('property', attrs.property, metaEntry, entryHtml);\n    \n            // Content\n            createBreakdownEntry('content', attrs.content, metaEntry, entryHtml);\n    \n            // Http-equiv\n            createBreakdownEntry('http-equiv', attrs.httpEquiv, metaEntry, entryHtml);\n    \n            // Itemprop\n            createBreakdownEntry('itemprop', attrs.itemprop, metaEntry, entryHtml);\n        });\n\n        const viewMetaEntryElement = document.querySelectorAll('.view-metadata-entry');\n        const viewMetaModalBody = document.querySelector('.view-metadata__body');\n        const viewMetaMetaSection = viewMetaModalBody.querySelector('.view-metadata__breakdown-view-section');\n\n        if (viewMetaEntryElement.length) {\n            viewMetaMetaSection.removeAttribute('hidden');\n        }\n    \n        viewMetaEntryElement.forEach((item) => {\n            viewMetaMetaSection.appendChild(item);\n        });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        //\n        // Render entries in the open graph section\n        //\n\n        const openGraphSectionEl = viewMetaModalBody.querySelector('.view-metadata__open-graph-section');\n        const openGraphEntriesEl = viewMetaModalBody.querySelectorAll('.view-metadata-entry[data-view-md-item-property*=\"og:\"]');\n\n        if (openGraphEntriesEl.length) {\n            openGraphSectionEl.removeAttribute('hidden');\n            \n            openGraphEntriesEl.forEach((item) => {\n                const ogEntry = item.cloneNode(true);\n                ogEntry.querySelectorAll('.view-metadata-entry__attr-name, .view-metadata-entry__tag').forEach(item => item.remove());\n                ogEntry.querySelectorAll('.view-metadata-entry__item').forEach(item => unwrap(item));\n    \n                openGraphSectionEl.appendChild(ogEntry);\n            });\n    \n            // Add class to required properties\n            const openGraphRequiredArr = [\n                'og:title',\n                'og:type',\n                'og:image',\n                'og:url'\n            ];\n    \n            openGraphRequiredArr.forEach((item) => {\n                const requiredEntryEl = openGraphSectionEl.querySelector(`[data-view-md-item-property=\"${item}\"]`);\n    \n                if (requiredEntryEl) {\n                    requiredEntryEl\n                        .classList\n                        .add('view-metadata-entry--required');\n                } else {\n                    const missingEntry = document.createElement('strong');\n                    const missingList = openGraphSectionEl.querySelector('.view-metadata__missing');\n                    \n                    missingEntry.innerHTML = `<span style=\"color: red;\">${item}</span>`;\n                    missingList.removeAttribute('hidden');\n                    missingList.appendChild(missingEntry);\n                }\n            });\n    \n            // Sort required entries to top of list\n            const notRequiredOpenGraphEl = openGraphSectionEl.querySelectorAll('.view-metadata-entry:not(.view-metadata-entry--required)');\n            notRequiredOpenGraphEl.forEach(item => openGraphSectionEl.appendChild(item));\n        }\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n        //\n        // Schema section\n        //\n\n        const schemaJson = document.querySelectorAll('[type=\"application/ld+json\"]');\n\n        if (schemaJson.length) {\n            const schemaSectionEl = viewMetaModalBody.querySelector('.view-metadata__schema-section');\n            schemaSectionEl.removeAttribute('hidden');\n\n            schemaJson.forEach((item) => {\n                \n                // Clean up json data because for some reason it's invalid\n                const jsonString = item.innerHTML.toString().trim();\n                const validJson = '{' + jsonString.substring(\n                    jsonString.indexOf('{') + 1, \n                    jsonString.lastIndexOf('}')\n                ) + '}';\n    \n                const data = JSON.parse(validJson);\n                \n                Object.keys(data).forEach(function(key) {\n    \n                    const dataValue = (data[key].toString() === '[object Object]') ? '' : data[key];\n    \n                    // Render key and value\n                    const levelOneEntry = document.createElement('div');\n                    levelOneEntry.classList.add('view-metadata-entry');\n                    levelOneEntry.innerHTML = /* html */`\n                        <div class=\"view-metadata-entry__item\">\n                            <div class=\"view-metadata-entry__attr-name\">${key}</div>\n                            <div class=\"view-metadata-entry__attr-value\">${dataValue}</div>\n                        </div>\n                    `;\n                    schemaSectionEl.appendChild(levelOneEntry);\n    \n                    if (data[key] instanceof Object) {\n                        let nestedData = JSON.stringify(data[key]);\n                        nestedData = JSON.parse(nestedData);\n    \n                        Object.keys(nestedData).forEach(function(key) {\n    \n                            const dataValue = (nestedData[key].toString() === '[object Object]') ? '' : nestedData[key];\n                            \n                            // Render nested key(s) and value(s)\n                            const levelTwoEntry = document.createElement('div');\n                            levelTwoEntry.classList.add('view-metadata-entry');\n                            levelTwoEntry.innerHTML = /* html */`\n                                <div class=\"view-metadata-entry__item\">\n                                    <div class=\"view-metadata-entry__attr-name\">${key}</div>\n                                    <div class=\"view-metadata-entry__attr-value\">${dataValue}</div>\n                                </div>\n                            `;\n                            levelOneEntry.appendChild(levelTwoEntry);\n    \n                            if (nestedData[key] instanceof Object) {\n                                let nestedDataData = JSON.stringify(nestedData[key]);\n                                nestedDataData = JSON.parse(nestedDataData);\n            \n                                Object.keys(nestedDataData).forEach(function(key) {\n    \n                                    // Render nested nested key(s) and value(s)\n                                    const levelThreeEntry = document.createElement('div');\n                                    levelThreeEntry.classList.add('view-metadata-entry');\n                                    levelThreeEntry.innerHTML = /* html */`\n                                        <div class=\"view-metadata-entry__item\">\n                                            <div class=\"view-metadata-entry__attr-name\">${key}</div>\n                                            <div class=\"view-metadata-entry__attr-value\">${nestedDataData[key]}</div>\n                                        </div>\n                                    `;\n                                    levelTwoEntry.appendChild(levelThreeEntry);\n                                });\n                            }                        \n                        });\n                    }\n                });\n            });\n        }\n\n\n\n\n\n\n\n\n\n\n\n    \n    \n        //\n        // Code view\n        //\n\n        metaElements.forEach((item) => {\n            const metaEntryCode = document.createElement('div');\n            metaEntryCode.classList.add('view-metadata-entry');\n            metaEntryCode.classList.add('view-metadata-entry--code');\n            metaEntryCode.innerText = item.outerHTML.toString();\n            viewMetaModalBody.querySelector('.view-metadata__code-view-section').appendChild(metaEntryCode);\n        });\n\n\n        //\n        // Modal button\n        //\n\n        const viewMetadataControls = document.querySelector('.view-metadata-overlay-controls');\n        document.body.appendChild(viewMetadataControls);\n\n        const modalShowBtn = viewMetadataControls.querySelector('.view-metadata-modal-btn');\n        \n        if (param.btnX !== null) {\n            modalShowBtn.style.right = 'auto';\n            modalShowBtn.style.left = param.btnX;\n        }\n        \n        if (param.btnY !== null) {\n            modalShowBtn.style.top = param.btnY;\n        }\n        \n        if (param.btnZ !== null) {\n            modalShowBtn.style.zIndex = param.btnZ;\n        }\n\n        modalShowBtn.addEventListener('click', () => {\n            modalShow();\n        });\n\n        // Hide modal\n        function modalHide() {\n            document.documentElement.classList.remove('js-view-metadata-modal-showing');\n            focusedElementBeforeModal.focus();\n        }\n        \n        const modalCloseBtn = document.querySelector('.view-metadata__close-btn');\n        modalCloseBtn.addEventListener('click', () => {\n            modalHide();\n        });\n\n        // Hide modal with esc key\n        modalEl.addEventListener('keydown', function (event) {\n            if (event.key === 'Escape' && document.documentElement.classList.contains('js-view-metadata-modal-showing')) {\n                modalHide();\n            }\n        });\n\n        // Hide modal by clicking outside of it\n        const modalContent = document.querySelectorAll('.view-metadata__content');\n        modalEl.addEventListener('mousedown', function (event) {\n            let isClickInside = false;\n            \n            modalContent.forEach((item) => {\n                if (item.contains(event.target)) {\n                    isClickInside = true;\n                }\n            });\n            \n            if (!isClickInside && document.documentElement.classList.contains('js-view-metadata-modal-showing')) {\n                modalHide();\n            }\n        });\n\n        // Show modal\n        let focusedElementBeforeModal;\n        function modalShow() {\n            document.documentElement.classList.add('js-view-metadata-modal-showing');\n            \n            // Save current focus\n            focusedElementBeforeModal = document.activeElement;\n\n            // Listen for and trap the keyboard\n            modalEl.addEventListener('keydown', trapTabKey);\n            \n            // Find all focusable children\n            let focusableElementsString =`\n                a[href],\n                area[href],\n                input,\n                select:not([disabled]),\n                textarea:not([tabindex=\"-1\"]),\n                button:not([disabled]),\n                iframe,\n                object,\n                embed,\n                [tabindex=\"0\"],\n                [contenteditable],\n                [role=\"button\"]\n            `;\n                \n            let focusableElements = modalEl.querySelectorAll(focusableElementsString);\n            \n            // Convert NodeList to Array\n            focusableElements = Array.prototype.slice.call(focusableElements);\n\n            const firstTabStop = focusableElements[0];\n            const lastTabStop = focusableElements[focusableElements.length - 1];\n            \n            // Set initial focus on the modal\n            modalEl.focus();\n            \n            function trapTabKey(event) {\n                \n                // Check for TAB key press\n                if (event.keyCode === 9) {\n\n                    // SHIFT + TAB\n                    if (event.shiftKey) {\n                        if (document.activeElement === firstTabStop) {\n                            event.preventDefault();\n                            lastTabStop.focus();\n                        }\n\n                    // TAB\n                    } else {\n                        if (document.activeElement === lastTabStop) {\n                            event.preventDefault();\n                            firstTabStop.focus();\n                        }\n                    }\n                }\n            }\n        }\n\n\n        //\n        // Make div(s) with role=button act like an actual button for a11y reasons\n        //\n        \n        document.querySelectorAll('.view-metadata__close-btn, .view-metadata-modal-btn').forEach((item) => {\n            item.addEventListener('keydown', function (event) {\n                if (event.key === 'Enter' || event.code === 'Space') {\n                    event.preventDefault();\n                    this.click();\n                }\n            });\n        });\n    }\n})();\n\n\n\n"]}