{"version":3,"sources":["view-metadata.js"],"names":["createEntryElement","attrName","attr","parent","cloneThisNode","entry","cloneNode","innerHTML","toString","appendChild","Element","prototype","setAttributes","attrs","key","this","setAttribute","scriptLinkage","document","getElementById","querySelector","param","btnX","btnY","btnZ","urlParam","URLSearchParams","getAttribute","split","get","metaElements","head","querySelectorAll","textStyle","createElement","textStyleString","textContent","modalEl","classList","add","id","aria-labelledby","aria-modal","role","tabindex","modalDialog","metadataContentHtmlString","body","forEach","item","metaEntry","metaEntryTitle","getAttributeNames","reduce","acc","name","[object Object]","entryHtml","charset","property","content","httpEquiv","itemprop","viewmetaEntryElement","viewMetaModalBody","metaEntryCode","innerText","outerHTML","viewMetadataControls","modalShowBtn","modalHide","documentElement","remove","focusedElementBeforeModal","focus","style","right","left","top","zIndex","addEventListener","activeElement","event","keyCode","shiftKey","firstTabStop","preventDefault","lastTabStop","focusableElements","Array","slice","call","length","modalShow","contains","modalContent","isClickInside","target","code","click"],"mappings":"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","sourcesContent":["/*!\n    * View metadata v1.0.1\n    * Easy to implement tool that displays a pages metadata.\n    *\n    * Copyright 2021-2022 Marshall Crosby\n    * https://marshallcrosby.com\n*/\n\n\n(function() {\n    'use strict';\n\n    // Set multiple attributes on an element\n    Element.prototype.setAttributes = function (attrs) {\n        for(let key in attrs) {\n            this.setAttribute(key, attrs[key]);\n        }\n    };\n\n    // Parse meta entry data into html element\n    function createEntryElement(attrName, attr, parent, cloneThisNode) {\n        if (attr) {\n            const entry = cloneThisNode.cloneNode(true);\n            entry.innerHTML = /* html */`\n                <span class=\"view-metadata-entry__attr-name\">${attrName}:</span>\n                <span class=\"view-metadata-entry__attr-value\">${attr.toString()}</span>\n            `;\n            parent.appendChild(entry);\n        }\n    }\n\n    const scriptLinkage = document.getElementById('view-metadata-js') || document.querySelector('script[src*=view-metadata]');\n    const param = {\n        btnX: null,\n        btnY: null,\n        btnZ: null\n    }\n\n    if (scriptLinkage) {\n        const urlParam = new URLSearchParams(scriptLinkage.getAttribute('src').split('?')[1]);\n        param.btnX = urlParam.get('btn-x');\n        param.btnY = urlParam.get('btn-y');\n        param.btnZ = urlParam.get('btn-z');\n    }\n\n    const metaElements = document.head.querySelectorAll('meta');\n    \n    if (metaElements) {\n\n        //\n        // Create style tag to dump styles into for the metadata modal\n        //\n        \n        const textStyle = document.createElement('style');\n        textStyle.setAttribute('id', 'viewMetaDataStyle');\n\n        // Import compressed styles as a string\n        const textStyleString = `//=inject view-metadata.css`;\n\n        // Apply in page styles to style tag\n        textStyle.textContent = textStyleString;\n\n        // Add in page styles to head\n        document.head.appendChild(textStyle);\n\n\n\n        //\n        // Setup modal markup\n        //\n\n        const modalEl = document.createElement('div');\n        modalEl.classList.add('view-metadata');\n        \n        modalEl.setAttributes({\n            'id': 'viewMetadataModal',\n            'aria-labelledby': 'viewMetadataModalTitle',\n            'aria-modal': 'true',\n            'role': 'dialog',\n            'tabindex': '-1',\n        });\n\n        // Create modal dialog div\n        const modalDialog = document.createElement('div');\n\n        // Insert modal dialog element into outer modal element\n        modalDialog.classList.add('view-metadata__dialog');\n        modalEl.appendChild(modalDialog);\n\n        const metadataContentHtmlString = `//=inject _view-metadata-markup.html`;\n\n        // Add the rest of the html string into modal dialog\n        modalDialog.innerHTML = metadataContentHtmlString;\n        document.body.appendChild(modalEl);\n\n        metaElements.forEach((item) => {\n    \n            // Entries element\n            const metaEntry = document.createElement('div');\n            metaEntry.classList.add('view-metadata-entry');\n            document.body.appendChild(metaEntry);\n    \n            // Entry title\n            const metaEntryTitle = document.createElement('span');\n            metaEntryTitle.classList.add('view-metadata-entry__tag');\n            metaEntryTitle.innerHTML = '&#60;meta&#62;';\n            metaEntry.appendChild(metaEntryTitle);\n    \n            // Create object from node attibute names and values\n            const attrs = item.getAttributeNames().reduce((acc, name) => {\n                return {...acc, [name]: item.getAttribute(name)};\n            },{});\n    \n            // Entry element\n            const entryHtml = document.createElement('div');\n            entryHtml.classList.add('view-metadata-entry__item');\n    \n    \n            /* -----------------------------------------------\n            Apply attibute(s) name and value if defined\n            ----------------------------------------------- */\n    \n            // Charset\n            createEntryElement('charset', attrs.charset, metaEntry, entryHtml);\n    \n            // Name\n            createEntryElement('name', attrs.name, metaEntry, entryHtml);\n    \n            // Property\n            createEntryElement('property', attrs.property, metaEntry, entryHtml);\n    \n            // Content\n            createEntryElement('content', attrs.content, metaEntry, entryHtml);\n    \n            // Http-equiv\n            createEntryElement('http-equiv', attrs.httpEquiv, metaEntry, entryHtml);\n    \n            // Itemprop\n            createEntryElement('itemprop', attrs.itemprop, metaEntry, entryHtml);\n        });\n    \n        const viewmetaEntryElement = document.querySelectorAll('.view-metadata-entry');\n        const viewMetaModalBody = document.querySelector('.view-metadata__body');\n    \n        viewmetaEntryElement.forEach((item) => {\n            viewMetaModalBody.querySelector('.view-metadata__breakdown-view-section').appendChild(item);\n        });\n    \n    \n        // Code view\n        metaElements.forEach((item) => {\n            const metaEntryCode = document.createElement('div');\n            metaEntryCode.classList.add('view-metadata-entry');\n            metaEntryCode.classList.add('view-metadata-entry--code');\n            metaEntryCode.innerText = item.outerHTML.toString();\n            viewMetaModalBody.querySelector('.view-metadata__code-view-section').appendChild(metaEntryCode);\n        });\n\n        const viewMetadataControls = document.querySelector('.view-metadata-overlay-controls');\n        document.body.appendChild(viewMetadataControls);\n\n        const modalShowBtn = viewMetadataControls.querySelector('.view-metadata-modal-btn');\n        \n        if (param.btnX !== null) {\n            modalShowBtn.style.right = 'auto';\n            modalShowBtn.style.left = param.btnX;\n        }\n        \n        if (param.btnY !== null) {\n            modalShowBtn.style.top = param.btnY;\n        }\n        \n        if (param.btnZ !== null) {\n            modalShowBtn.style.zIndex = param.btnZ;\n        }\n\n        modalShowBtn.addEventListener('click', () => {\n            modalShow();\n        });\n\n        // Hide modal\n        function modalHide() {\n            document.documentElement.classList.remove('js-view-metadata-modal-showing');\n            focusedElementBeforeModal.focus();\n        }\n        \n        const modalCloseBtn = document.querySelector('.view-metadata__close-btn');\n        modalCloseBtn.addEventListener('click', () => {\n            modalHide();\n        });\n\n        // Hide modal with esc key\n        modalEl.addEventListener('keydown', function (event) {\n            if (event.key === 'Escape' && document.documentElement.classList.contains('js-view-metadata-modal-showing')) {\n                modalHide();\n            }\n        });\n\n        // Hide modal by clicking outside of it\n        const modalContent = document.querySelectorAll('.view-metadata__content');\n        modalEl.addEventListener('mousedown', function (event) {\n            let isClickInside = false;\n            \n            modalContent.forEach((item) => {\n                if (item.contains(event.target)) {\n                    isClickInside = true;\n                }\n            });\n            \n            if (!isClickInside && document.documentElement.classList.contains('js-view-metadata-modal-showing')) {\n                modalHide();\n            }\n        });\n\n\n\n        // Show modal\n        let focusedElementBeforeModal;\n        function modalShow() {\n            document.documentElement.classList.add('js-view-metadata-modal-showing');\n            \n            // Save current focus\n            focusedElementBeforeModal = document.activeElement;\n\n            // Listen for and trap the keyboard\n            modalEl.addEventListener('keydown', trapTabKey);\n            \n            // Find all focusable children\n            let focusableElementsString =`\n                a[href],\n                area[href],\n                input,\n                select:not([disabled]),\n                textarea:not([tabindex=\"-1\"]),\n                button:not([disabled]),\n                iframe,\n                object,\n                embed,\n                [tabindex=\"0\"],\n                [contenteditable],\n                [role=\"button\"]\n            `;\n                \n            let focusableElements = modalEl.querySelectorAll(focusableElementsString);\n            \n            // Convert NodeList to Array\n            focusableElements = Array.prototype.slice.call(focusableElements);\n\n            const firstTabStop = focusableElements[0];\n            const lastTabStop = focusableElements[focusableElements.length - 1];\n            \n            // Set initial focus on the modal\n            modalEl.focus();\n            \n            function trapTabKey(event) {\n                \n                // Check for TAB key press\n                if (event.keyCode === 9) {\n\n                    // SHIFT + TAB\n                    if (event.shiftKey) {\n                        if (document.activeElement === firstTabStop) {\n                            event.preventDefault();\n                            lastTabStop.focus();\n                        }\n\n                    // TAB\n                    } else {\n                        if (document.activeElement === lastTabStop) {\n                            event.preventDefault();\n                            firstTabStop.focus();\n                        }\n                    }\n                }\n            }\n        }\n\n\n        //\n        // Make div(s) with role=button act like an actual button for a11y reasons\n        //\n        \n        document.querySelectorAll('.view-metadata__close-btn, .view-metadata-modal-btn').forEach((item) => {\n            item.addEventListener('keydown', function (event) {\n                if (event.key === 'Enter' || event.code === 'Space') {\n                    event.preventDefault();\n                    this.click();\n                }\n            });\n        });\n    }\n})();\n\n\n\n"]}