{"version":3,"sources":["view-metadata.js"],"names":["createBreakdownEntry","attrName","attr","parent","cloneThisNode","entry","cloneNode","innerHTML","toString","appendChild","closest","setAttribute","Element","prototype","setAttributes","attrs","key","this","wrapInTag","wrapperElement","elClass","document","createElement","classList","add","parentNode","scriptLinkage","querySelector","param","btnX","btnY","btnZ","urlParam","URLSearchParams","getAttribute","split","get","metaElements","head","querySelectorAll","textStyle","textStyleString","textContent","modalEl","id","aria-labelledby","aria-modal","role","tabindex","modalDialog","metadataContentHtmlString","body","forEach","item","metaEntry","metaEntryTitle","getAttributeNames","reduce","acc","name","[object Object]","entryHtml","charset","property","content","itemprop","viewMetaEntryElement","viewMetaModalBody","viewMetaMetaSection","length","removeAttribute","remove","openGraphSectionEl","openGraphEntriesEl","ogEntry","wrapper","docFrag","createDocumentFragment","firstChild","child","removeChild","replaceChild","unwrap","requiredEntryEl","missingEntry","missingList","ogImageEntry","ogImageValueEl","ogImageImgEl","aria-label","innerText","addEventListener","window","open","schemaJson","schemaSectionEl","jsonString","trim","validJson","substring","indexOf","lastIndexOf","schemaOut","objectToList","obj","output","Object","keys","JSON","parse","schemaListEl","schemaValidateButton","schemaValidateUrl","location","href","richResultsButton","richResultsUrl","canonicalTag","canonicalSection","index","canWrapper","linkEntryTitle","prepend","viewMetadataControls","modalShowBtn","modalHide","documentElement","focusedElementBeforeModal","focus","style","right","left","top","zIndex","activeElement","event","keyCode","shiftKey","firstTabStop","preventDefault","lastTabStop","focusableElements","Array","slice","call","modalShow","contains","modalContent","isClickInside","target","code","click","showOnlyEl","showOnlySections","optionText","e","val","value","hidden"],"mappings":"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","sourcesContent":["/*!\n    * View metadata v1.3.3\n    * Easy to implement tool that displays a pages metadata.\n    *\n    * Copyright 2021-2023 Blend Interactive\n    * https://blendinteractive.com\n*/\n\n(function () {\n    'use strict';\n\n\n    /* -----------------------------------------------\n        Functions and methods\n    ----------------------------------------------- */\n\n    // Set multiple attributes on an element\n    Element.prototype.setAttributes = function (attrs) {\n        for (let key in attrs) {\n            this.setAttribute(key, attrs[key]);\n        }\n    };\n\n    Element.prototype.wrapInTag = function (wrapperElement, elClass) {\n        wrapperElement = document.createElement(wrapperElement);\n        \n        if (elClass !== null) {\n            wrapperElement.classList.add(elClass);\n        }\n\n        this.parentNode.appendChild(wrapperElement);\n        return wrapperElement.appendChild(this);\n    };\n\n    // Parse meta entry data into html element\n    function createBreakdownEntry(attrName, attr, parent, cloneThisNode) {\n        if (attr) {\n            const entry = cloneThisNode.cloneNode(true);\n\n            entry.innerHTML = /* html */`\n                <div class=\"view-metadata-entry__attr-name\">${attrName.toString()}</div>\n                <div class=\"view-metadata-entry__attr-value\">${attr.toString()}</div>\n            `;\n            parent.appendChild(entry);\n\n            // Add special attribute for property metatags\n            if (attrName === 'property') {\n                entry\n                    .closest('.view-metadata-entry')\n                    .setAttribute('data-view-md-item-property', attr.toString());\n            }\n        }\n    }\n\n    // Unwrap function\n    function unwrap(wrapper) {\n        const docFrag = document.createDocumentFragment();\n\n        while (wrapper.firstChild) {\n            const child = wrapper.removeChild(wrapper.firstChild);\n            docFrag.appendChild(child);\n        }\n\n        wrapper.parentNode.replaceChild(docFrag, wrapper);\n    }\n\n\n    /* -----------------------------------------------\n        Params\n    ----------------------------------------------- */\n\n    var scriptLinkage = document.querySelector('script[src*=view-metadata]');\n    let param = {\n        btnX: null,\n        btnY: null,\n        btnZ: null\n    };\n\n    if (scriptLinkage) {\n        const urlParam = new URLSearchParams(scriptLinkage.getAttribute('src').split('?')[1]);\n        param.btnX = urlParam.get('btn-x');\n        param.btnY = urlParam.get('btn-y');\n        param.btnZ = urlParam.get('btn-z');\n    }\n\n    const metaElements = document.head.querySelectorAll('meta');\n\n    if (metaElements) {\n\n        /* -----------------------------------------------\n            Styling\n        ----------------------------------------------- */\n\n        const textStyle = document.createElement('style');\n        textStyle.setAttribute('id', 'viewMetaDataStyle');\n\n        // Import compressed styles as a string\n        const textStyleString = `//=inject view-metadata.css`;\n\n        // Apply in page styles to style tag\n        textStyle.textContent = textStyleString;\n\n        // Add in page styles to head\n        document.head.appendChild(textStyle);\n\n\n        /* -----------------------------------------------\n            Setup modal\n        ----------------------------------------------- */\n\n        const modalEl = document.createElement('div');\n        modalEl.classList.add('view-metadata');\n\n        modalEl.setAttributes({\n            'id': 'viewMetadataModal',\n            'aria-labelledby': 'viewMetadataModalTitle',\n            'aria-modal': 'true',\n            'role': 'dialog',\n            'tabindex': '-1',\n        });\n\n        // Create modal dialog div\n        const modalDialog = document.createElement('div');\n\n        // Insert modal dialog element into outer modal element\n        modalDialog.classList.add('view-metadata__dialog');\n        modalEl.appendChild(modalDialog);\n\n        const metadataContentHtmlString = `//=inject _view-metadata-markup.html`;\n\n        // Add the rest of the html string into modal dialog\n        modalDialog.innerHTML = metadataContentHtmlString;\n        document.body.appendChild(modalEl);\n\n        metaElements.forEach((item) => {\n\n            // Entries element\n            const metaEntry = document.createElement('div');\n            metaEntry.classList.add('view-metadata-entry');\n            document.body.appendChild(metaEntry);\n\n            // Entry title\n            const metaEntryTitle = document.createElement('span');\n            metaEntryTitle.classList.add('view-metadata-entry__tag');\n            metaEntryTitle.innerHTML = '&#60;meta&#62;';\n            metaEntry.appendChild(metaEntryTitle);\n\n            // Create object from node attibute names and values\n            const attrs = item.getAttributeNames().reduce((acc, name) => {\n                return {...acc, [name]: item.getAttribute(name)};\n            },{});\n\n            // Entry element\n            const entryHtml = document.createElement('div');\n            entryHtml.classList.add('view-metadata-entry__item');\n\n\n            /* -----------------------------------------------\n                Apply attribute(s) name and value if defined\n            ----------------------------------------------- */\n\n            // Charset\n            createBreakdownEntry('charset', attrs.charset, metaEntry, entryHtml);\n\n            // Name\n            createBreakdownEntry('name', attrs.name, metaEntry, entryHtml);\n\n            // Property\n            createBreakdownEntry('property', attrs.property, metaEntry, entryHtml);\n\n            // Http-equiv\n            createBreakdownEntry('http-equiv', item.getAttribute('http-equiv'), metaEntry, entryHtml);\n\n            // Content\n            createBreakdownEntry('content', attrs.content, metaEntry, entryHtml);\n\n\n            // Itemprop\n            createBreakdownEntry('itemprop', attrs.itemprop, metaEntry, entryHtml);\n        });\n\n        const viewMetaEntryElement = document.querySelectorAll('.view-metadata-entry');\n        const viewMetaModalBody = document.querySelector('.view-metadata__body');\n        const viewMetaMetaSection = viewMetaModalBody.querySelector('.view-metadata__breakdown-view-section');\n\n        if (viewMetaEntryElement.length) {\n            viewMetaMetaSection.removeAttribute('hidden');\n        } else {\n            viewMetaMetaSection.remove();\n        }\n\n        viewMetaEntryElement.forEach((item) => {\n            viewMetaMetaSection.appendChild(item);\n        });\n\n\n        /* -----------------------------------------------\n            Render entries in the open graph section\n        ----------------------------------------------- */\n\n        const openGraphSectionEl = viewMetaModalBody.querySelector('.view-metadata__open-graph-section');\n        const openGraphEntriesEl = viewMetaModalBody.querySelectorAll('.view-metadata-entry[data-view-md-item-property*=\"og:\"]');\n\n        if (openGraphEntriesEl.length) {\n            openGraphSectionEl.removeAttribute('hidden');\n\n            openGraphEntriesEl.forEach((item) => {\n                const ogEntry = item.cloneNode(true);\n                ogEntry.querySelectorAll('.view-metadata-entry__attr-name, .view-metadata-entry__tag').forEach(item => item.remove());\n                ogEntry.querySelectorAll('.view-metadata-entry__item').forEach(item => unwrap(item));\n\n                openGraphSectionEl.appendChild(ogEntry);\n            });\n\n            // Add class to required properties\n            const openGraphRequiredArr = [\n                'og:title',\n                'og:type',\n                'og:image',\n                'og:url'\n            ];\n\n            openGraphRequiredArr.forEach((item) => {\n                const requiredEntryEl = openGraphSectionEl.querySelector(`[data-view-md-item-property=\"${item}\"]`);\n\n                if (requiredEntryEl) {\n                    requiredEntryEl\n                        .classList\n                        .add('view-metadata-entry--required');\n                } else {\n                    const missingEntry = document.createElement('strong');\n                    const missingList = openGraphSectionEl.querySelector('.view-metadata__missing');\n\n                    missingEntry.innerHTML = `<span style=\"color: red;\">${item}</span>`;\n                    missingList.removeAttribute('hidden');\n                    missingList.appendChild(missingEntry);\n                }\n            });\n\n            // Sort required entries to top of list\n            const notRequiredOpenGraphEl = openGraphSectionEl.querySelectorAll('.view-metadata-entry:not(.view-metadata-entry--required)');\n            notRequiredOpenGraphEl.forEach(item => openGraphSectionEl.appendChild(item));\n\n            // Render og:image\n            const ogImageEntry = openGraphSectionEl.querySelector('[data-view-md-item-property=\"og:image\"]');\n            if (ogImageEntry) {\n                const ogImageValueEl = ogImageEntry.querySelectorAll('.view-metadata-entry__attr-value');\n                const ogImageImgEl = document.createElement('div');\n                ogImageImgEl.setAttributes({\n                    'tabindex': '0',\n                    'role': 'link',\n                    'aria-label': 'Open image in new window'\n                })\n                ogImageImgEl.innerHTML = `<img src=\"${ogImageValueEl[1].innerText}\">`;\n                ogImageImgEl.classList.add('view-metadata__open-graph-image');\n                ogImageValueEl[0].appendChild(ogImageImgEl);\n\n                // const ogImagePreview = document.createElement('div');\n                // ogImagePreview.classList.add('view-metadata__open-graph-image-preview');\n                // ogImagePreview.appendChild(ogImageImgEl.children[0].cloneNode());\n                // ogImageValueEl[0].appendChild(ogImagePreview);\n\n                ogImageImgEl.addEventListener('click', function () {\n                    window.open(ogImageValueEl[1].innerText, '_blank');\n                });\n            }\n        } else {\n            openGraphSectionEl.remove();\n        }\n\n\n        /* -----------------------------------------------\n            Render schema section\n        ----------------------------------------------- */\n\n        // Parse json to html ul\n        // Special thanks to the js G.O.A.T. John Pavek https://github.com/nhawdge\n        function objectToList(obj) {\n            var output = '';\n\n            for (let key of Object.keys(obj)) {\n                output += `\n                    <li class=\"view-metadata-schema-list__item\">\n                        <span class=\"view-metadata-entry__attr-name\">${key}:</span>\n                    `;\n                if (obj[key] instanceof Object) {\n                    output += `<ul class=\"view-metadata-schema-list\"> ${objectToList(obj[key])}</ul>`;\n                } else {\n                    output += `<span class=\"view-metadata-entry__attr-value\">${obj[key]}</span>`;\n                }\n            }\n\n            output += '</li>';\n            return output;\n        }\n\n        const schemaJson = document.querySelectorAll('[type=\"application/ld+json\"]');\n        const schemaSectionEl = viewMetaModalBody.querySelector('.view-metadata__schema-section');\n\n        if (schemaJson.length) {\n            schemaSectionEl.removeAttribute('hidden');\n\n            schemaJson.forEach((item) => {\n\n                // Clean up json data because for some reason it's invalid\n                const jsonString = item.innerHTML.toString().trim();\n                const validJson = '{' + jsonString.substring(\n                    jsonString.indexOf('{') + 1, \n                    jsonString.lastIndexOf('}')\n                ) + '}';\n\n                const data = JSON.parse(validJson);\n\n                const schemaOut = objectToList(data);\n                const schemaListEl = document.createElement('ul');\n\n                schemaListEl.classList.add('view-metadata-schema-list'); \n                schemaListEl.innerHTML = schemaOut;\n                schemaSectionEl.appendChild(schemaListEl);\n            });\n            const schemaValidateButton = viewMetaModalBody.querySelector('.view-metadata__schema-button');\n            const schemaValidateUrl = `https://validator.schema.org/#url=${window.location.href}`;\n            // const schemaValidateUrl = `https://validator.schema.org/#url=https://blendinteractive.com`;\n\n            schemaValidateButton.addEventListener('click', function () {\n                window.open(schemaValidateUrl, '_blank');\n            });\n\n            const richResultsButton = viewMetaModalBody.querySelector('.view-metadata__rich-results-button');\n            const richResultsUrl = `https://search.google.com/test/rich-results?utm_campaign=sdtt&utm_medium=code&url=${window.location.href}`;\n            // const richResultsUrl = `https://search.google.com/test/rich-results?utm_campaign=sdtt&utm_medium=code&url=https://blendinteractive.com`;\n\n            richResultsButton.addEventListener('click', function () {\n                window.open(richResultsUrl, '_blank');\n            });\n\n        } else {\n            schemaSectionEl.remove();\n        }\n\n\n        /* -----------------------------------------------\n            Canonical\n        ----------------------------------------------- */\n\n        const canonicalTag = document.querySelectorAll('link[rel=\"canonical\"]');\n        const canonicalSection = viewMetaModalBody.querySelector('.view-metadata__canonical-section');\n\n        if (canonicalTag.length) {\n            canonicalTag.forEach((item, index) => {\n                \n                // Entry element\n                const entryHtml = document.createElement('div');\n                entryHtml.classList.add('view-metadata-entry__item');\n\n                createBreakdownEntry('href', item.href, canonicalSection, entryHtml);\n\n                const canEntry = canonicalSection.querySelectorAll('.view-metadata-entry__item')[index];\n                canEntry.wrapInTag('div', 'view-metadata-entry');\n\n                const canWrapper = canonicalSection.querySelectorAll('.view-metadata-entry')[index];\n                \n                const linkEntryTitle = document.createElement('span');\n                linkEntryTitle.classList.add('view-metadata-entry__tag');\n                linkEntryTitle.innerHTML = '&#60;link&#62;';\n                canWrapper.prepend(linkEntryTitle);\n            });\n        } else {\n            canonicalSection.remove();\n        }\n\n\n        /* -----------------------------------------------\n            Render code view\n        ----------------------------------------------- */\n\n        // metaElements.forEach((item) => {\n        //     const metaEntryCode = document.createElement('div');\n        //     metaEntryCode.classList.add('view-metadata-entry');\n        //     metaEntryCode.classList.add('view-metadata-entry--code');\n        //     metaEntryCode.innerText = item.outerHTML.toString();\n        //     viewMetaModalBody.querySelector('.view-metadata__code-view-section').appendChild(metaEntryCode);\n        // });\n\n\n        /* -----------------------------------------------\n            Modal button\n        ----------------------------------------------- */\n\n        const viewMetadataControls = document.querySelector('.view-metadata-overlay-controls');\n        document.body.appendChild(viewMetadataControls);\n\n        const modalShowBtn = viewMetadataControls.querySelector('.view-metadata-modal-btn');\n\n        if (param.btnX !== null) {\n            modalShowBtn.style.right = 'auto';\n            modalShowBtn.style.left = param.btnX;\n        }\n\n        if (param.btnY !== null) {\n            modalShowBtn.style.top = param.btnY;\n        }\n\n        if (param.btnZ !== null) {\n            modalShowBtn.style.zIndex = param.btnZ;\n        }\n\n        modalShowBtn.addEventListener('click', () => {\n            modalShow();\n        });\n\n        // Hide modal\n        function modalHide() {\n            document.documentElement.classList.remove('js-view-metadata-modal-showing');\n            focusedElementBeforeModal.focus();\n        }\n\n        const modalCloseBtn = document.querySelector('.view-metadata__close-btn');\n        modalCloseBtn.addEventListener('click', () => {\n            modalHide();\n        });\n\n        // Hide modal with esc key\n        modalEl.addEventListener('keydown', function (event) {\n            if (event.key === 'Escape' && document.documentElement.classList.contains('js-view-metadata-modal-showing')) {\n                modalHide();\n            }\n        });\n\n        // Hide modal by clicking outside of it\n        const modalContent = document.querySelectorAll('.view-metadata__content');\n        modalEl.addEventListener('mousedown', function (event) {\n            let isClickInside = false;\n\n            modalContent.forEach((item) => {\n                if (item.contains(event.target)) {\n                    isClickInside = true;\n                }\n            });\n\n            if (!isClickInside && document.documentElement.classList.contains('js-view-metadata-modal-showing')) {\n                modalHide();\n            }\n        });\n\n        // Show modal\n        let focusedElementBeforeModal;\n        function modalShow() {\n            document.documentElement.classList.add('js-view-metadata-modal-showing');\n\n            // Save current focus\n            focusedElementBeforeModal = document.activeElement;\n\n            // Listen for and trap the keyboard\n            modalEl.addEventListener('keydown', trapTabKey);\n\n            // Find all focusable children\n            let focusableElementsString =`\n                a[href],\n                area[href],\n                input,\n                select:not([disabled]),\n                textarea:not([tabindex=\"-1\"]),\n                button:not([disabled]),\n                iframe,\n                object,\n                embed,\n                [tabindex=\"0\"],\n                [contenteditable],\n                [role=\"button\"]\n            `;\n\n            let focusableElements = modalEl.querySelectorAll(focusableElementsString);\n\n            // Convert NodeList to Array\n            focusableElements = Array.prototype.slice.call(focusableElements);\n\n            const firstTabStop = focusableElements[0];\n            const lastTabStop = focusableElements[focusableElements.length - 1];\n\n            // Set initial focus on the modal\n            modalEl.focus();\n\n            function trapTabKey(event) {\n\n                // Check for TAB key press\n                if (event.keyCode === 9) {\n\n                    // SHIFT + TAB\n                    if (event.shiftKey) {\n                        if (document.activeElement === firstTabStop) {\n                            event.preventDefault();\n                            lastTabStop.focus();\n                        }\n\n                    // TAB\n                    } else {\n                        if (document.activeElement === lastTabStop) {\n                            event.preventDefault();\n                            firstTabStop.focus();\n                        }\n                    }\n                }\n            }\n        }\n\n\n        /* -----------------------------------------------\n            Make div(s) with role=button act like an\n            actual button for a11y reasons\n        ----------------------------------------------- */\n\n        modalEl.querySelectorAll('.view-metadata__close-btn, .view-metadata-modal-btn, .view-metadata__schema-button, .view-metadata__open-graph-image').forEach((item) => {\n            item.addEventListener('keydown', function (event) {\n                if (event.key === 'Enter' || event.code === 'Space') {\n                    event.preventDefault();\n                    this.click();\n                }\n            });\n        });\n\n\n        /* -----------------------------------------------\n            Sort\n        ----------------------------------------------- */\n\n        const showOnlyEl = viewMetaModalBody.querySelector('.view-metadata__showonly .view-metadata__select');\n        const showOnlySections = viewMetaModalBody.querySelectorAll('.view-metadata__section');\n\n        if (showOnlySections.length > 1) {\n            showOnlySections.forEach((item) => {\n                const optionText = item.querySelector('.view-metadata__title');\n                showOnlyEl.innerHTML += `<option value=\"${item.classList[1]}\">${optionText.innerText}</option>`;\n            });\n\n            showOnlyEl.addEventListener('change', function(e) {\n                showSection(this.value);\n            });\n\n            function showSection(val) {\n                if (val !== '') {\n                    viewMetaModalBody\n                        .querySelectorAll('.view-metadata__section')\n                        .forEach(item => item.hidden = true);\n                    viewMetaModalBody.querySelector(`.${val}`).removeAttribute('hidden');\n                } else {\n                    viewMetaModalBody\n                        .querySelectorAll('.view-metadata__section')\n                        .forEach(item => item.hidden = false);\n                }\n            }\n        } else {\n            showOnlyEl\n                .closest('.view-metadata__showonly')\n                .remove();\n        }\n    }\n\n    // javascript:var v = '1.2.5'; var el = document.getElementById('viewMetadataModal'); if (!el) {var s = document.createElement('script');s.type='text/javascript';document.body.appendChild(s);s.src=`https://cdn.jsdelivr.net/gh/marshallcrosby/view-metadata@${v}/dist/js/view-metadata.min.js`;void(0);s.addEventListener('load',function(){document.querySelector('.view-metadata-modal-btn').click()})} else {document.querySelector('.view-metadata-modal-btn').click()};\n})();\n\n\n\n\n"]}