{"version":3,"sources":["view-metadata.js"],"names":[],"mappingsfile":"view-metadata.js","sourcesContent":["/*!\n    * View metadata v1.2.0\n    * Easy to implement tool that displays a pages metadata.\n    *\n    * Copyright 2021-2022 Marshall Crosby\n    * https://marshallcrosby.com\n*/\n\n/*\n    TODO:\n        Add open graph checking\n            Basic (required):\n                • og:title\n                • og:type\n                • og:image\n                • og:url\n            Optional:\n                • og:audio\n                • og:description\n                • og:determiner\n                • og:locale\n                • og:locale:alternate\n                • og:site_name\n                • og:video\n*/\n\n\n(function() {\n    'use strict';\n\n    // Set multiple attributes on an element\n    Element.prototype.setAttributes = function (attrs) {\n        for(let key in attrs) {\n            this.setAttribute(key, attrs[key]);\n        }\n    };\n\n    // Parse meta entry data into html element\n    function createBreakdownEntry(attrName, attr, parent, cloneThisNode) {\n        if (attr) {\n            const entry = cloneThisNode.cloneNode(true);\n            \n            entry.innerHTML = /* html */`\n                <div class=\"view-metadata-entry__attr-name\">${attrName}</div>\n                <div class=\"view-metadata-entry__attr-value\">${attr.toString()}</div>\n            `;\n            parent.appendChild(entry);\n\n            // Add special attribute for property metatags\n            if (attrName === 'property') {\n                entry\n                    .closest('.view-metadata-entry')\n                    .setAttribute('data-view-md-item-property', attr.toString());\n            }\n        }\n    }\n\n    // Unwrap function\n    function unwrap(wrapper) {\n        const docFrag = document.createDocumentFragment();\n        \n        while (wrapper.firstChild) {\n            const child = wrapper.removeChild(wrapper.firstChild);\n            docFrag.appendChild(child);\n        }\n\n        wrapper.parentNode.replaceChild(docFrag, wrapper);\n    }\n\n    // Params\n    const scriptLinkage = document.getElementById('view-metadata-js') || document.querySelector('script[src*=view-metadata]');\n    const param = {\n        btnX: null,\n        btnY: null,\n        btnZ: null\n    }\n\n    if (scriptLinkage) {\n        const urlParam = new URLSearchParams(scriptLinkage.getAttribute('src').split('?')[1]);\n        param.btnX = urlParam.get('btn-x');\n        param.btnY = urlParam.get('btn-y');\n        param.btnZ = urlParam.get('btn-z');\n    }\n\n    const metaElements = document.head.querySelectorAll('meta');\n    \n    if (metaElements) {\n\n        //\n        // Create style tag to dump styles into for the metadata modal\n        //\n        \n        const textStyle = document.createElement('style');\n        textStyle.setAttribute('id', 'viewMetaDataStyle');\n\n        // Import compressed styles as a string\n        const textStyleString = `//=inject view-metadata.css`;\n\n        // Apply in page styles to style tag\n        textStyle.textContent = textStyleString;\n\n        // Add in page styles to head\n        document.head.appendChild(textStyle);\n\n\n\n        //\n        // Setup modal markup\n        //\n\n        const modalEl = document.createElement('div');\n        modalEl.classList.add('view-metadata');\n        \n        modalEl.setAttributes({\n            'id': 'viewMetadataModal',\n            'aria-labelledby': 'viewMetadataModalTitle',\n            'aria-modal': 'true',\n            'role': 'dialog',\n            'tabindex': '-1',\n        });\n\n        // Create modal dialog div\n        const modalDialog = document.createElement('div');\n\n        // Insert modal dialog element into outer modal element\n        modalDialog.classList.add('view-metadata__dialog');\n        modalEl.appendChild(modalDialog);\n\n        const metadataContentHtmlString = `//=inject _view-metadata-markup.html`;\n\n        // Add the rest of the html string into modal dialog\n        modalDialog.innerHTML = metadataContentHtmlString;\n        document.body.appendChild(modalEl);\n\n        metaElements.forEach((item) => {\n    \n            // Entries element\n            const metaEntry = document.createElement('div');\n            metaEntry.classList.add('view-metadata-entry');\n            document.body.appendChild(metaEntry);\n    \n            // Entry title\n            const metaEntryTitle = document.createElement('span');\n            metaEntryTitle.classList.add('view-metadata-entry__tag');\n            metaEntryTitle.innerHTML = '&#60;meta&#62;';\n            metaEntry.appendChild(metaEntryTitle);\n    \n            // Create object from node attibute names and values\n            const attrs = item.getAttributeNames().reduce((acc, name) => {\n                return {...acc, [name]: item.getAttribute(name)};\n            },{});\n    \n            // Entry element\n            const entryHtml = document.createElement('div');\n            entryHtml.classList.add('view-metadata-entry__item');\n    \n    \n            /* -----------------------------------------------\n            Apply attibute(s) name and value if defined\n            ----------------------------------------------- */\n    \n            // Charset\n            createBreakdownEntry('charset', attrs.charset, metaEntry, entryHtml);\n    \n            // Name\n            createBreakdownEntry('name', attrs.name, metaEntry, entryHtml);\n    \n            // Property\n            createBreakdownEntry('property', attrs.property, metaEntry, entryHtml);\n    \n            // Content\n            createBreakdownEntry('content', attrs.content, metaEntry, entryHtml);\n    \n            // Http-equiv\n            createBreakdownEntry('http-equiv', attrs.httpEquiv, metaEntry, entryHtml);\n    \n            // Itemprop\n            createBreakdownEntry('itemprop', attrs.itemprop, metaEntry, entryHtml);\n        });\n\n        const viewMetaEntryElement = document.querySelectorAll('.view-metadata-entry');\n        const viewMetaModalBody = document.querySelector('.view-metadata__body');\n        const viewMetaMetaSection = viewMetaModalBody.querySelector('.view-metadata__breakdown-view-section');\n\n        if (viewMetaEntryElement.length) {\n            viewMetaMetaSection.removeAttribute('hidden');\n        }\n    \n        viewMetaEntryElement.forEach((item) => {\n            viewMetaMetaSection.appendChild(item);\n        });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        //\n        // Render entries in the open graph section\n        //\n\n        const openGraphSectionEl = viewMetaModalBody.querySelector('.view-metadata__open-graph-section');\n        const openGraphEntriesEl = viewMetaModalBody.querySelectorAll('.view-metadata-entry[data-view-md-item-property*=\"og:\"]');\n\n        if (openGraphEntriesEl.length) {\n            openGraphSectionEl.removeAttribute('hidden');\n            \n            openGraphEntriesEl.forEach((item) => {\n                const ogEntry = item.cloneNode(true);\n                ogEntry.querySelectorAll('.view-metadata-entry__attr-name, .view-metadata-entry__tag').forEach(item => item.remove());\n                ogEntry.querySelectorAll('.view-metadata-entry__item').forEach(item => unwrap(item));\n    \n                openGraphSectionEl.appendChild(ogEntry);\n            });\n    \n            // Add class to required properties\n            const openGraphRequiredArr = [\n                'og:title',\n                'og:type',\n                'og:image',\n                'og:url'\n            ];\n    \n            openGraphRequiredArr.forEach((item) => {\n                const requiredEntryEl = openGraphSectionEl.querySelector(`[data-view-md-item-property=\"${item}\"]`);\n    \n                if (requiredEntryEl) {\n                    requiredEntryEl\n                        .classList\n                        .add('view-metadata-entry--required');\n                } else {\n                    const missingEntry = document.createElement('strong');\n                    const missingList = openGraphSectionEl.querySelector('.view-metadata__missing');\n                    \n                    missingEntry.innerHTML = `<span style=\"color: red;\">${item}</span>`;\n                    missingList.removeAttribute('hidden');\n                    missingList.appendChild(missingEntry);\n                }\n            });\n    \n            // Sort required entries to top of list\n            const notRequiredOpenGraphEl = openGraphSectionEl.querySelectorAll('.view-metadata-entry:not(.view-metadata-entry--required)');\n            notRequiredOpenGraphEl.forEach(item => openGraphSectionEl.appendChild(item));\n        }\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n        //\n        // Schema section\n        //\n\n        const schemaJson = document.querySelectorAll('[type=\"application/ld+json\"]');\n\n        if (schemaJson.length) {\n            const schemaSectionEl = viewMetaModalBody.querySelector('.view-metadata__schema-section');\n            schemaSectionEl.removeAttribute('hidden');\n\n            schemaJson.forEach((item) => {\n                \n                // Clean up json data because for some reason it's invalid\n                const jsonString = item.innerHTML.toString().trim();\n                const validJson = '{' + jsonString.substring(\n                    jsonString.indexOf('{') + 1, \n                    jsonString.lastIndexOf('}')\n                ) + '}';\n    \n                const data = JSON.parse(validJson);\n                \n                Object.keys(data).forEach(function(key) {\n    \n                    const dataValue = (data[key].toString() === '[object Object]') ? '' : data[key];\n    \n                    // Render key and value\n                    const levelOneEntry = document.createElement('div');\n                    levelOneEntry.classList.add('view-metadata-entry');\n                    levelOneEntry.innerHTML = /* html */`\n                        <div class=\"view-metadata-entry__item\">\n                            <div class=\"view-metadata-entry__attr-name\">${key}</div>\n                            <div class=\"view-metadata-entry__attr-value\">${dataValue}</div>\n                        </div>\n                    `;\n                    schemaSectionEl.appendChild(levelOneEntry);\n    \n                    if (data[key] instanceof Object) {\n                        let nestedData = JSON.stringify(data[key]);\n                        nestedData = JSON.parse(nestedData);\n    \n                        Object.keys(nestedData).forEach(function(key) {\n    \n                            const dataValue = (nestedData[key].toString() === '[object Object]') ? '' : nestedData[key];\n                            \n                            // Render nested key(s) and value(s)\n                            const levelTwoEntry = document.createElement('div');\n                            levelTwoEntry.classList.add('view-metadata-entry');\n                            levelTwoEntry.innerHTML = /* html */`\n                                <div class=\"view-metadata-entry__item\">\n                                    <div class=\"view-metadata-entry__attr-name\">${key}</div>\n                                    <div class=\"view-metadata-entry__attr-value\">${dataValue}</div>\n                                </div>\n                            `;\n                            levelOneEntry.appendChild(levelTwoEntry);\n    \n                            if (nestedData[key] instanceof Object) {\n                                let nestedDataData = JSON.stringify(nestedData[key]);\n                                nestedDataData = JSON.parse(nestedDataData);\n            \n                                Object.keys(nestedDataData).forEach(function(key) {\n    \n                                    // Render nested nested key(s) and value(s)\n                                    const levelThreeEntry = document.createElement('div');\n                                    levelThreeEntry.classList.add('view-metadata-entry');\n                                    levelThreeEntry.innerHTML = /* html */`\n                                        <div class=\"view-metadata-entry__item\">\n                                            <div class=\"view-metadata-entry__attr-name\">${key}</div>\n                                            <div class=\"view-metadata-entry__attr-value\">${nestedDataData[key]}</div>\n                                        </div>\n                                    `;\n                                    levelTwoEntry.appendChild(levelThreeEntry);\n                                });\n                            }                        \n                        });\n                    }\n                });\n            });\n        }\n\n\n\n\n\n\n\n\n\n\n\n    \n    \n        //\n        // Code view\n        //\n\n        metaElements.forEach((item) => {\n            const metaEntryCode = document.createElement('div');\n            metaEntryCode.classList.add('view-metadata-entry');\n            metaEntryCode.classList.add('view-metadata-entry--code');\n            metaEntryCode.innerText = item.outerHTML.toString();\n            viewMetaModalBody.querySelector('.view-metadata__code-view-section').appendChild(metaEntryCode);\n        });\n\n\n        //\n        // Modal button\n        //\n\n        const viewMetadataControls = document.querySelector('.view-metadata-overlay-controls');\n        document.body.appendChild(viewMetadataControls);\n\n        const modalShowBtn = viewMetadataControls.querySelector('.view-metadata-modal-btn');\n        \n        if (param.btnX !== null) {\n            modalShowBtn.style.right = 'auto';\n            modalShowBtn.style.left = param.btnX;\n        }\n        \n        if (param.btnY !== null) {\n            modalShowBtn.style.top = param.btnY;\n        }\n        \n        if (param.btnZ !== null) {\n            modalShowBtn.style.zIndex = param.btnZ;\n        }\n\n        modalShowBtn.addEventListener('click', () => {\n            modalShow();\n        });\n\n        // Hide modal\n        function modalHide() {\n            document.documentElement.classList.remove('js-view-metadata-modal-showing');\n            focusedElementBeforeModal.focus();\n        }\n        \n        const modalCloseBtn = document.querySelector('.view-metadata__close-btn');\n        modalCloseBtn.addEventListener('click', () => {\n            modalHide();\n        });\n\n        // Hide modal with esc key\n        modalEl.addEventListener('keydown', function (event) {\n            if (event.key === 'Escape' && document.documentElement.classList.contains('js-view-metadata-modal-showing')) {\n                modalHide();\n            }\n        });\n\n        // Hide modal by clicking outside of it\n        const modalContent = document.querySelectorAll('.view-metadata__content');\n        modalEl.addEventListener('mousedown', function (event) {\n            let isClickInside = false;\n            \n            modalContent.forEach((item) => {\n                if (item.contains(event.target)) {\n                    isClickInside = true;\n                }\n            });\n            \n            if (!isClickInside && document.documentElement.classList.contains('js-view-metadata-modal-showing')) {\n                modalHide();\n            }\n        });\n\n        // Show modal\n        let focusedElementBeforeModal;\n        function modalShow() {\n            document.documentElement.classList.add('js-view-metadata-modal-showing');\n            \n            // Save current focus\n            focusedElementBeforeModal = document.activeElement;\n\n            // Listen for and trap the keyboard\n            modalEl.addEventListener('keydown', trapTabKey);\n            \n            // Find all focusable children\n            let focusableElementsString =`\n                a[href],\n                area[href],\n                input,\n                select:not([disabled]),\n                textarea:not([tabindex=\"-1\"]),\n                button:not([disabled]),\n                iframe,\n                object,\n                embed,\n                [tabindex=\"0\"],\n                [contenteditable],\n                [role=\"button\"]\n            `;\n                \n            let focusableElements = modalEl.querySelectorAll(focusableElementsString);\n            \n            // Convert NodeList to Array\n            focusableElements = Array.prototype.slice.call(focusableElements);\n\n            const firstTabStop = focusableElements[0];\n            const lastTabStop = focusableElements[focusableElements.length - 1];\n            \n            // Set initial focus on the modal\n            modalEl.focus();\n            \n            function trapTabKey(event) {\n                \n                // Check for TAB key press\n                if (event.keyCode === 9) {\n\n                    // SHIFT + TAB\n                    if (event.shiftKey) {\n                        if (document.activeElement === firstTabStop) {\n                            event.preventDefault();\n                            lastTabStop.focus();\n                        }\n\n                    // TAB\n                    } else {\n                        if (document.activeElement === lastTabStop) {\n                            event.preventDefault();\n                            firstTabStop.focus();\n                        }\n                    }\n                }\n            }\n        }\n\n\n        //\n        // Make div(s) with role=button act like an actual button for a11y reasons\n        //\n        \n        document.querySelectorAll('.view-metadata__close-btn, .view-metadata-modal-btn').forEach((item) => {\n            item.addEventListener('keydown', function (event) {\n                if (event.key === 'Enter' || event.code === 'Space') {\n                    event.preventDefault();\n                    this.click();\n                }\n            });\n        });\n    }\n})();\n\n\n\n"]}